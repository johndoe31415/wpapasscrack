#!/usr/bin/python3
#	wpapasscrack - Attempt to crack WPA passphrases of multiple networks
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of wpapasscrack.
#
#	wpapasscrack is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	wpapasscrack is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with wpapasscrack; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import re
import sys
import subprocess
import os
import contextlib
import json
import time
import hashlib
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Attack wireless networks using aircrack-ng/john.")
parser.add_argument("-d", "--db-filename", metavar = "jsonfile", type = str, default = "cracked.json", help = "Database file in which to store progress. Defaults to %(default)s.")
parser.add_argument("-w", "--wordlist-dir", metavar = "dirname", type = str, default = "SecLists", help = "Specifies directory in which to find the SecLists word list. Defaults to %(default)s.")
parser.add_argument("-a", "--aircrack-binary", metavar = "file", type = str, default = "aircrack-ng", help = "Specifies executable of aircrack-ng. Defaults to %(default)s.")
parser.add_argument("-j", "--john-binary", metavar = "file", type = str, default = "john", help = "Specifies executable of John the Ripper. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("capfile", metavar = "capfile", type = str, help = "Capture file to attempt to crack.")
args = parser.parse_args(sys.argv[1:])

network_re = re.compile(r"\s*(?P<netno>\d+)\s+(?P<bssid>[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2})\s+(?P<essid>\S+)\s+WPA \((?P<handshakes>\d+) handshake")
proc = subprocess.Popen([ args.aircrack_binary, args.capfile ], stdin = subprocess.DEVNULL, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
(stdout, stderr) = proc.communicate()
network_list = stdout.decode().split("\n")
networks = [ ]
for line in network_list:
	match = network_re.match(line)
	if match is not None:
		match = match.groupdict()
		match["handshakes"] = int(match["handshakes"])
		match["bssid"] = match["bssid"].lower()
		if match["handshakes"] > 0:
			networks.append(match)
		match["cracked"] = False
		match["netid"] = match["bssid"] + " / " + match["essid"]

def enumerate_attacks():
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/probable-v2-top12000.txt" }
	if os.path.isfile("custom.txt"):
		yield { "name": "dictionary/JtR-Jumbo", "john": [ "--wordlist=%(filename)s", "--rules:Jumbo" ], "filename": "custom.txt" }
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/WiFi-WPA/probable-v2-wpa-top4800.txt" }
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/darkweb2017-top10000.txt" }
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/Most-Popular-Letter-Passes.txt" }
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/Common-Credentials/10-million-password-list-top-1000000.txt" }
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/xato-net-10-million-passwords-1000000.txt" }
	yield { "name": "dictionary", "john": None, "filename": "%(seclists)s/Passwords/openwall.net-all.txt" }
	if os.path.isfile("custom.txt"):
		yield { "name": "dictionary/JtR-KoreLogic", "john": [ "--wordlist=%(filename)s", "--rules:T9" ], "filename": "custom.txt" }
		yield { "name": "dictionary/JtR-KoreLogic", "john": [ "--wordlist=%(filename)s", "--rules:Extra" ], "filename": "custom.txt" }
		yield { "name": "dictionary/JtR-KoreLogic", "john": [ "--wordlist=%(filename)s", "--rules:hashcat" ], "filename": "custom.txt" }
		yield { "name": "dictionary/JtR-KoreLogic", "john": [ "--wordlist=%(filename)s", "--rules:KoreLogic" ], "filename": "custom.txt" }
		yield { "name": "dictionary/JtR-KoreLogic", "john": [ "--wordlist=%(filename)s", "--rules:Wordlist" ], "filename": "custom.txt" }
	yield { "name": "dictionary/JtR-Jumbo", "john": [ "--wordlist=%(filename)s", "--rules:Jumbo" ], "filename": "%(seclists)s/Passwords/WiFi-WPA/probable-v2-wpa-top4800.txt" }

try:
	with open(args.db_filename) as f:
		success_db = json.load(f)
except FileNotFoundError:
	success_db = { }

def write_db(db, dbfile):
	with open(dbfile, "w") as f:
		json.dump(db, fp = f, indent = 4, sort_keys = True)
		f.write("\n")

def hashfile(filename):
	engine = hashlib.md5()
	with open(filename, "rb") as f:
		while True:
			chunk = f.read(1024 * 1024)
			if len(chunk) == 0:
				break
			engine.update(chunk)
	return engine.hexdigest()

if args.verbose >= 1:
	print("%d networks found for attack, %d PSKs already known." % (len(networks), already_cracked_cnt))

for attack in enumerate_attacks():
	for network in networks:
		netid = network["netid"]
		if netid not in success_db:
			success_db[netid] = {
				"essid":		network["essid"],
				"bssid":		network["bssid"],
				"run":			[ ],
				"runtime":		0,
				"runtimes":		[ ],
			}
			write_db(success_db, args.db_filename)

		if "psk" in success_db[netid]:
			continue

		crack_filename = attack["filename"] % {
			"seclists":		args.wordlist_dir,
		}
		attack_id = [ attack["name"], attack["john"], hashfile(crack_filename) ]
		if attack_id in success_db[netid]["run"]:
			continue

		if args.verbose >= 2:
			print("Running %s attack on %s (%s)" % (attack["name"], network["essid"], network["bssid"]))

		t0 = time.time()
		with contextlib.suppress(FileNotFoundError):
			os.unlink("keyfile")
		if attack["john"] is None:
			subprocess.check_call([ args.aircrack_binary, "-w", crack_filename, "-l", "keyfile", "-b", network["bssid"], args.capfile ])
		else:
			john_proc = subprocess.Popen([ args.john_binary, "--stdout" ] + [ param % { "filename": crack_filename } for param in attack["john"] ], stdout = subprocess.PIPE)
			aircrack_proc = subprocess.Popen([ args.aircrack_binary, "-w", "-", "-l", "keyfile", "-b", network["bssid"], args.capfile ], stdin = john_proc.stdout)
			aircrack_proc.wait()
			john_proc.wait()
		if os.path.isfile("keyfile"):
			# Cracked Wifi password
			with open("keyfile") as f:
				password = f.read()
			success_db[netid]["psk"] = password
			write_db(success_db, args.db_filename)
			os.unlink("keyfile")

		runtime = time.time() - t0
		success_db[netid]["runtime"] += runtime
		success_db[netid]["runtimes"].append({
			"attack":			attack_id,
			"time_secs":		runtime,
			"filename":			attack["filename"],
			"actual_filename":	crack_filename,
		})
		success_db[netid]["run"].append(attack_id)
		write_db(success_db, args.db_filename)
